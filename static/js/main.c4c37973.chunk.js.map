{"version":3,"sources":["components/Gamecard.js","components/Gameboard.js","App.js","reportWebVitals.js","index.js"],"names":["Gamecard","id","clicked","useState","error","setError","isLoaded","setIsLoaded","boss","setBoss","bossName","setBossName","hover","setHover","useEffect","abortController","AbortController","fetch","method","then","res","json","result","name","toUpperCase","abort","mouseEntered","mouseLeft","message","className","onClick","onMouseEnter","onMouseLeave","onMouseUp","onTouchStart","onTouchEnd","src","avatar","alt","getCards","bossIdArray","bossCards","length","Math","floor","random","includes","push","Gameboard","gameCards","setGameCards","pickedCardIds","setPickedCardIds","score","setScore","highScore","setHighScore","hardMode","setHardMode","resultText","setResultText","checkCard","increaseScore","newScore","shuffleCards","shuffledCards","array","t","i","m","shuffle","dealNewCards","newCards","checkCardsForMatch","newCardsIds","map","newCard","indexOf","gameCard","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4c37973.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Gamecard = ({id, clicked}) => {\r\n\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [boss, setBoss] = useState({});\r\n    const [bossName, setBossName] = useState('');\r\n    const [hover, setHover] = useState(false);\r\n    \r\n\r\n    useEffect(() => {\r\n        const abortController = new AbortController();\r\n\r\n        fetch(`https://megaman-robot-masters.fly.dev/byId/${id}`, {\r\n            method: 'GET'\r\n        })\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setIsLoaded(true);\r\n                    setBoss(result);\r\n                    setBossName(result.name.toUpperCase());\r\n                },\r\n\r\n                (error) => {\r\n                    setIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            )\r\n        \r\n            return () => {\r\n            abortController.abort();\r\n        }\r\n\r\n    }, );\r\n\r\n    \r\n\r\n    const mouseEntered = () => {\r\n        setHover(true);\r\n    }\r\n\r\n    const mouseLeft = () => {\r\n        setHover(false);\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n        return <div className=\"loadingDiv\">Loading...</div>;\r\n    } else {\r\n        return (\r\n            \r\n                    <div className=\"gameCardDiv\" onClick={clicked} onMouseEnter={mouseEntered} onMouseLeave={mouseLeft} onMouseUp={mouseLeft} onTouchStart={mouseEntered} onTouchEnd={mouseLeft}>\r\n                        <div className=\"bossFrameOuter\">\r\n                            <div className=\"bossFrameMiddle\">\r\n                                <div className=\"bossFrameInner\">\r\n                                    <span className={hover ? 'bossCornerHover secondCorner' : 'bossCorner secondCorner'}></span>\r\n                                    <span className={hover ? 'bossCornerHover firstCorner' : 'bossCorner firstCorner'}></span>\r\n                                    <span className={hover ? 'bossCornerHover thirdCorner' : 'bossCorner thirdCorner'}></span>\r\n                                    <span className={hover ? 'bossCornerHover fourthCorner' : 'bossCorner fourthCorner'}></span>\r\n                                    <div className=\"bossImgDiv\">\r\n                                        <img className=\"bossImg\" src={boss.avatar} alt={bossName}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bossName\">{bossName}</div>\r\n                    </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Gamecard;","import React, { useState } from 'react';\r\nimport Gamecard from './Gamecard';\r\n\r\n\r\nconst getCards = () => {\r\n    // Get randomized array of boss ids. Empty deps array means this will only run once when Gameboard mounts\r\n    let bossIdArray = [];\r\n    let bossCards = [];\r\n    let numCards = 9; // Adjust for number of cards\r\n        while (bossIdArray.length < numCards) {\r\n            let id = Math.floor(Math.random() * 32) + 9\r\n\r\n            if (!bossIdArray.includes(id)) {\r\n                bossIdArray.push(id);\r\n                bossCards.push({id:id});\r\n            } \r\n        }\r\n    return bossCards;\r\n}\r\n\r\n\r\nconst Gameboard = () => {\r\n\r\n    const [gameCards, setGameCards] = useState(getCards());\r\n    const [pickedCardIds, setPickedCardIds] = useState([]);\r\n    const [score, setScore] = useState(0);\r\n    const [highScore, setHighScore] = useState(0);\r\n    const [hardMode, setHardMode] = useState(false);\r\n    const [resultText, setResultText] = useState('');\r\n\r\n\r\n    const handleCardSelect = (id) => {\r\n        // console.log('you clicked card ' + id);\r\n        setResultText('');\r\n        checkCard(id);\r\n\r\n        if (!hardMode) {\r\n            shuffleCards();\r\n        } else {\r\n            dealNewCards();\r\n        }\r\n    }\r\n\r\n    const checkCard = (id) => {\r\n        if (pickedCardIds.includes(id)) {\r\n            // console.log(\"Already picked! Reset!\");\r\n            setResultText('Try again!')\r\n            setPickedCardIds([]);\r\n            setScore(0);\r\n        } else {\r\n            // console.log(\"Correct!\");\r\n            setPickedCardIds([...pickedCardIds, id]);\r\n            increaseScore();\r\n        }\r\n    }\r\n\r\n    const increaseScore = () => {\r\n        let newScore = score + 1;\r\n        setScore(newScore)\r\n        if (newScore > highScore) {\r\n            setHighScore(newScore);\r\n        }\r\n        if (!hardMode && newScore === 9) {\r\n            setResultText('You win! Select any boss to reset');\r\n        }\r\n        if (hardMode && newScore === 32) {\r\n            setResultText('You win! Select any boss to reset');\r\n        }\r\n    }\r\n\r\n\r\n    // Shuffle array function (https://bost.ocks.org/mike/shuffle/)\r\n    const shuffle = (array) => {\r\n        let m = array.length, t, i;\r\n    \r\n      // While there remain elements to shuffle…\r\n        while (m) {\r\n    \r\n          // Pick a remaining element…\r\n          i = Math.floor(Math.random() * m--);\r\n    \r\n          // And swap it with the current element.\r\n          t = array[m];\r\n          array[m] = array[i];\r\n          array[i] = t;\r\n        }\r\n        return array;\r\n      } \r\n\r\n    const shuffleCards = () => {\r\n        let shuffledCards = shuffle([...gameCards]);\r\n        setGameCards(shuffledCards);\r\n    }  \r\n\r\n\r\n    const dealNewCards = () => {\r\n        let newCards = getCards();    \r\n\r\n        while (checkCardsForMatch(newCards, pickedCardIds) === true && pickedCardIds.length < 32) {\r\n            // console.log('no unique bosses');\r\n            newCards = getCards();\r\n        }\r\n        setGameCards(newCards);\r\n    }\r\n\r\n    const checkCardsForMatch = (newCards, pickedCardIds) => {\r\n        let newCardsIds = newCards.map(newCard => newCard.id);\r\n        for (let i = 0; i < newCardsIds.length; i++) {\r\n            if (pickedCardIds.indexOf(newCardsIds[i]) === -1) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const toggleDifficulty = () => {\r\n        setHardMode(!hardMode);\r\n        setPickedCardIds([]);\r\n        setScore(0);\r\n        dealNewCards();\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <div className=\"headerDiv\">\r\n                <div className=\"titleDiv\">\r\n                    <div className=\"titleLineGroup\">\r\n                        <div className=\"titleLines\"></div>\r\n                        <div className=\"titleLines\"></div>\r\n                        <div className=\"titleLines\"></div>\r\n                    </div>\r\n                    <div className=\"titleText\">MEGA MEMORY GAME</div>\r\n                    <div className=\"titleLineGroup\">\r\n                        <div className=\"titleLines\"></div>\r\n                        <div className=\"titleLines\"></div>\r\n                        <div className=\"titleLines\"></div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <h3>Don't select the same boss twice!</h3>\r\n                <h3>Change difficulty:</h3>\r\n                <div><button className=\"gameButton\" onClick={toggleDifficulty}>{hardMode ? '- HARD -' : '- NORMAL -'}</button></div>\r\n                <div className=\"scoreDiv\">\r\n                    <span>Score: {score}</span>\r\n                    <span>High score: {highScore}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"bodyDiv\">\r\n                <div className=\"bodyLinesDiv\">\r\n                        <div className=\"bodyLinesGroup\">\r\n                            <div className=\"bodyLines\"></div>\r\n                            <div className=\"bodyLines\"></div>\r\n                            <div className=\"bigBodyLines\"></div>\r\n                            <div className=\"bodyLines\"></div>\r\n                            <div className=\"bodyLines\"></div>\r\n                        </div>\r\n                        <div className=\"bodyLinesGroup\">\r\n                            <div className=\"bodyLines\"></div>\r\n                            <div className=\"bodyLines\"></div>\r\n                            <div className=\"bigBodyLines\"></div>\r\n                            <div className=\"bodyLines\"></div>\r\n                            <div className=\"bodyLines\"></div>\r\n                        </div>\r\n                        <div className=\"bodyLinesGroup\">\r\n                            <div className=\"bodyLines\"></div>\r\n                            <div className=\"bodyLines\"></div>\r\n                            <div className=\"bigBodyLines\"></div>\r\n                            <div className=\"bodyLines\"></div>\r\n                            <div className=\"bodyLines\"></div>\r\n                        </div>\r\n                </div>\r\n                <div className=\"gameCardGridDiv\">\r\n                    {gameCards.map((gameCard) => {\r\n                        return (\r\n                            <Gamecard\r\n                                key={gameCard.id}\r\n                                id={gameCard.id}\r\n                                clicked={() => handleCardSelect(gameCard.id)}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"footerDiv\">\r\n                <div className=\"titleDiv\">\r\n                    <div className=\"titleLineGroup\">\r\n                        <div className=\"titleLines\"></div>\r\n                        <div className=\"titleLines\"></div>\r\n                        <div className=\"titleLines\"></div>\r\n                    </div>\r\n                    <div className=\"footerText\">{resultText}</div>\r\n                    <div className=\"titleLineGroup\">\r\n                        <div className=\"titleLines\"></div>\r\n                        <div className=\"titleLines\"></div>\r\n                        <div className=\"titleLines\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Gameboard;","import './App.css';\r\nimport './Gameboard.css';\r\nimport './Gamecard.css';\r\nimport Gameboard from './components/Gameboard.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n\r\n        <Gameboard />\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}