{"version":3,"sources":["components/Gamecard.js","components/Gameboard.js","App.js","reportWebVitals.js","index.js"],"names":["Gamecard","id","clicked","useState","error","setError","isLoaded","setIsLoaded","boss","setBoss","useEffect","fetch","method","then","res","json","result","message","className","onClick","src","avatar","alt","name","Gameboard","bossIdArray","bossCards","length","Math","floor","random","includes","push","getCards","gameCards","setGameCards","pickedCardIds","setPickedCardIds","score","setScore","highScore","setHighScore","checkCard","console","log","increaseScore","newScore","shuffleCards","shuffledCards","array","t","i","m","shuffle","map","gameCard","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95d0937c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Gamecard = ({id, clicked}) => {\n\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [boss, setBoss] = useState({});\n\n\n    useEffect(() => {\n        fetch(`https://megaman-robot-masters.herokuapp.com/byId/${id}`, {\n            method: 'GET'\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setBoss(result);\n                },\n\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }, )\n\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            \n                    <div className=\"gameCardDiv\" onClick={clicked}>\n                        <img src={boss.avatar} alt={boss.name}/>\n                        <div>{boss.name}</div>\n                    </div>\n            \n        );\n    }\n\n\n\n\n    // return (\n    //     <div>\n            \n    //         <div className=\"gameCardDiv\" onClick={clicked}>\n    //             {letter}\n    //         </div>\n\n    //     </div>\n    // )\n\n}\n\n\nexport default Gamecard;","import React, { useState, useEffect } from 'react';\nimport Gamecard from './Gamecard';\n\n\nconst getCards = () => {\n    // Get randomized array of boss ids. Empty deps array means this will only run once when Gameboard mounts\n    let bossIdArray = [];\n    let bossCards = [];\n    let numCards = 9; // Adjust for number of cards\n        while (bossIdArray.length < numCards) {\n            let id = Math.floor(Math.random() * 31) + 10\n\n            // if (id < 10) {\n            //     id = '00' + id;\n            // } else {\n            //     id = '0' + id;\n            // }\n            \n            if (!bossIdArray.includes(id)) {\n                bossIdArray.push(id);\n                bossCards.push({id:id});\n            } \n        }  \n    // console.log(bossIdArray);\n    // console.log(bossCards);\n    return bossCards;\n    \n}\n\n\nconst Gameboard = () => {\n\n    const [gameCards, setGameCards] = useState(getCards());\n    const [pickedCardIds, setPickedCardIds] = useState([]);\n    const [score, setScore] = useState(0);\n    const [highScore, setHighScore] = useState(0);\n\n\n    const handleCardSelect = (id) => {\n        console.log('you clicked card ' + id);\n        checkCard(id);\n        shuffleCards();\n    }\n\n    \n    const checkCard = (id) => {\n        if (pickedCardIds.includes(id)) {\n            console.log(\"Already picked! Reset!\");\n            setPickedCardIds([]);\n            setScore(0);\n        } else {\n            console.log(\"Correct!\");\n            setPickedCardIds([...pickedCardIds, id]);\n            console.log(pickedCardIds);\n            increaseScore();\n        }\n    }\n\n    const increaseScore = () => {\n        let newScore = score + 1;\n        setScore(newScore)\n        if (newScore > highScore) {\n            setHighScore(newScore);\n        }\n    }\n\n\n    // Shuffle array function (https://bost.ocks.org/mike/shuffle/)\n    const shuffle = (array) => {\n        let m = array.length, t, i;\n    \n      // While there remain elements to shuffle…\n        while (m) {\n    \n          // Pick a remaining element…\n          i = Math.floor(Math.random() * m--);\n    \n          // And swap it with the current element.\n          t = array[m];\n          array[m] = array[i];\n          array[i] = t;\n        }\n    \n        return array;\n      } \n\n    const shuffleCards = () => {\n        let shuffledCards = shuffle([...gameCards]);\n        setGameCards(shuffledCards);\n        console.log(gameCards);\n    }    \n\n    return (\n        <div>\n            <h1>Memory Game</h1>\n            <p>Don't select the same card twice!</p>\n            <h2>Score: {score}</h2>\n            <h2>High score: {highScore}</h2>\n            <div className=\"gameCardGridDiv\">\n                {gameCards.map((gameCard) => {\n                    return (\n                        <Gamecard\n                            key={gameCard.id}\n                            id={gameCard.id}\n                            clicked={() => handleCardSelect(gameCard.id)}\n                        />\n                    );\n                })}\n            </div>\n\n        </div>\n    );\n\n\n}\n\n\nexport default Gameboard;","import './App.css';\nimport Gameboard from './components/Gameboard.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n        <Gameboard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}