{"version":3,"sources":["components/Gamecard.js","components/Gameboard.js","App.js","reportWebVitals.js","index.js"],"names":["Gamecard","id","letter","clicked","className","onClick","Gameboard","useState","gameCards","setGameCards","pickedCardIds","setPickedCardIds","score","setScore","highScore","setHighScore","checkCard","includes","console","log","increaseScore","newScore","shuffleCards","shuffledCards","array","t","i","m","length","Math","floor","random","shuffle","map","gameCard","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAkBeA,EAhBE,SAAC,GAA0B,EAAzBC,GAA0B,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAG3B,OACI,8BAEI,qBAAKC,UAAU,cAAcC,QAASF,EAAtC,SACKD,OCuFFI,EA3FG,WAEd,MAAkCC,mBAAS,CAAC,CAACN,GAAG,EAAGC,OAAO,KAAM,CAACD,GAAG,EAAGC,OAAQ,KAAM,CAACD,GAAG,EAAGC,OAAQ,KAAM,CAACD,GAAG,EAAGC,OAAQ,KAAM,CAACD,GAAG,EAAGC,OAAQ,OAA9I,mBAAOM,EAAP,KAAkBC,EAAlB,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAkCN,mBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAaMC,EAAY,SAACf,GACXS,EAAcO,SAAShB,IACvBiB,QAAQC,IAAI,0BACZR,EAAiB,IACjBE,EAAS,KAETK,QAAQC,IAAI,YACZR,EAAiB,GAAD,mBAAKD,GAAL,CAAoBT,KACpCiB,QAAQC,IAAIT,GACZU,MAIFA,EAAgB,WAClB,IAAIC,EAAWT,EAAQ,EACvBC,EAASQ,GACLA,EAAWP,GACXC,EAAaM,IAwBfC,EAAe,WACjB,IAAIC,EAnBQ,SAACC,GAIb,IAHA,IAAsBC,EAAGC,EAArBC,EAAIH,EAAMI,OAGPD,GAGLD,EAAIG,KAAKC,MAAMD,KAAKE,SAAWJ,KAG/BF,EAAID,EAAMG,GACVH,EAAMG,GAAKH,EAAME,GACjBF,EAAME,GAAKD,EAGb,OAAOD,EAIaQ,CAAQ,YAAIxB,IAChCC,EAAac,GACbL,QAAQC,IAAIX,IAGhB,OACI,gCACI,6CACA,kEACA,yCAAYI,KACZ,8CAAiBE,KACjB,qBAAKV,UAAU,kBAAf,SACKI,EAAUyB,KAAI,SAACC,GACZ,OACI,cAAC,EAAD,CACIhC,OAAQgC,EAAShC,OAEjBD,GAAIiC,EAASjC,GACbE,QAAS,kBAnEPF,EAmE8BiC,EAASjC,GAlE7DiB,QAAQC,IAAI,oBAAsBlB,GAClCe,EAAUf,QACVqB,IAHqB,IAACrB,IAiEGiC,EAASjC,aCrE3BkC,MATf,WACE,OACE,qBAAK/B,UAAU,MAAf,SAEI,cAAC,EAAD,OCKOgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4fbebc48.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Gamecard = ({id, letter, clicked}) => {\n\n\n    return (\n        <div>\n            \n            <div className=\"gameCardDiv\" onClick={clicked}>\n                {letter}\n            </div>\n\n        </div>\n    )\n\n}\n\n\nexport default Gamecard;","import React, { useState, useEffect } from 'react';\nimport Gamecard from './Gamecard';\n\n\n\nconst Gameboard = () => {\n\n    const [gameCards, setGameCards] = useState([{id:1, letter:'A'}, {id:2, letter: 'B'}, {id:3, letter: 'C'}, {id:4, letter: 'D'}, {id:5, letter: 'E'}]);\n    const [pickedCardIds, setPickedCardIds] = useState([]);\n    const [score, setScore] = useState(0);\n    const [highScore, setHighScore] = useState(0);\n\n    // useEffect(() => {\n    //     shuffleCards();\n    // });\n\n    const handleCardSelect = (id) => {\n        console.log('you clicked card ' + id);\n        checkCard(id);\n        shuffleCards();\n    }\n\n    \n    const checkCard = (id) => {\n        if (pickedCardIds.includes(id)) {\n            console.log(\"Already picked! Reset!\");\n            setPickedCardIds([]);\n            setScore(0);\n        } else {\n            console.log(\"Correct!\");\n            setPickedCardIds([...pickedCardIds, id]);\n            console.log(pickedCardIds);\n            increaseScore();\n        }\n    }\n\n    const increaseScore = () => {\n        let newScore = score + 1;\n        setScore(newScore)\n        if (newScore > highScore) {\n            setHighScore(newScore);\n        }\n    }\n\n\n    // Shuffle array function (https://bost.ocks.org/mike/shuffle/)\n    const shuffle = (array) => {\n        let m = array.length, t, i;\n    \n      // While there remain elements to shuffle…\n        while (m) {\n    \n          // Pick a remaining element…\n          i = Math.floor(Math.random() * m--);\n    \n          // And swap it with the current element.\n          t = array[m];\n          array[m] = array[i];\n          array[i] = t;\n        }\n    \n        return array;\n      } \n\n    const shuffleCards = () => {\n        let shuffledCards = shuffle([...gameCards]);\n        setGameCards(shuffledCards);\n        console.log(gameCards);\n    }    \n\n    return (\n        <div>\n            <h1>Memory Game</h1>\n            <p>Don't select the same card twice!</p>\n            <h2>Score: {score}</h2>\n            <h2>High score: {highScore}</h2>\n            <div className=\"gameCardGridDiv\">\n                {gameCards.map((gameCard) => {\n                    return (\n                        <Gamecard\n                            letter={gameCard.letter}\n                            key={gameCard.id}\n                            id={gameCard.id}\n                            clicked={() => handleCardSelect(gameCard.id)}\n                        />\n                    );\n                })}\n            </div>\n\n        </div>\n    );\n\n\n}\n\n\nexport default Gameboard;","import './App.css';\nimport Gameboard from './components/Gameboard.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n        <Gameboard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}