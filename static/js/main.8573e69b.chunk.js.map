{"version":3,"sources":["components/Gamecard.js","components/Gameboard.js","App.js","reportWebVitals.js","index.js"],"names":["Gamecard","id","clicked","useState","error","setError","isLoaded","setIsLoaded","boss","setBoss","bossName","setBossName","hover","setHover","useEffect","abortController","AbortController","fetch","method","then","res","json","result","name","toUpperCase","abort","message","className","onClick","onMouseEnter","onMouseLeave","src","avatar","alt","getCards","bossIdArray","bossCards","length","Math","floor","random","includes","push","Gameboard","gameCards","setGameCards","pickedCardIds","setPickedCardIds","score","setScore","highScore","setHighScore","hardMode","setHardMode","resultText","setResultText","checkCard","console","log","increaseScore","newScore","shuffleCards","shuffledCards","array","t","i","m","shuffle","dealNewCards","newCards","checkCardsForMatch","newCardsIds","map","newCard","indexOf","gameCard","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSA2FeA,EAzFE,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,QAEnB,EAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAA0BR,oBAAS,GAAnC,mBAAOS,EAAP,KAAcC,EAAd,KAIAC,qBAAU,WACN,IAAMC,EAAkB,IAAIC,gBAmBxB,OAjBJC,MAAM,oDAAD,OAAqDhB,GAAM,CAC5DiB,OAAQ,QAEPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACGf,GAAY,GACZE,EAAQa,GACRX,EAAYW,EAAOC,KAAKC,kBAG5B,SAACpB,GACGG,GAAY,GACZF,EAASD,MAIV,WACPW,EAAgBU,YAexB,OAAIrB,EACO,0CAAaA,EAAMsB,WAClBpB,EAKI,sBAAKqB,UAAU,cAAcC,QAAS1B,EAAS2B,aAjB1C,WACjBhB,GAAS,IAgB8EiB,aAZzE,WACdjB,GAAS,IAWG,UACI,qBAAKc,UAAU,iBAAf,SACI,qBAAKA,UAAU,kBAAf,SACI,sBAAKA,UAAU,iBAAf,UACI,sBAAMA,UAAWf,EAAQ,+BAAiC,4BAC1D,sBAAMe,UAAWf,EAAQ,8BAAgC,2BACzD,sBAAMe,UAAWf,EAAQ,8BAAgC,2BACzD,sBAAMe,UAAWf,EAAQ,+BAAiC,4BAC1D,qBAAKe,UAAU,aAAf,SACI,qBAAKA,UAAU,UAAUI,IAAKvB,EAAKwB,OAAQC,IAAKvB,aAKhE,qBAAKiB,UAAU,WAAf,SAA2BjB,OAlBpC,qBAAKiB,UAAU,aAAf,yBC/CTO,EAAW,WAKT,IAHJ,IAAIC,EAAc,GACdC,EAAY,GAELD,EAAYE,OADR,GAC2B,CAClC,IAAIpC,EAAKqC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAQrCL,EAAYM,SAASxC,KACtBkC,EAAYO,KAAKzC,GACjBmC,EAAUM,KAAK,CAACzC,GAAGA,KAK/B,OAAOmC,GAuMIO,EAlMG,WAEd,MAAkCxC,mBAAS+B,KAA3C,mBAAOU,EAAP,KAAkBC,EAAlB,KACA,EAA0C1C,mBAAS,IAAnD,mBAAO2C,EAAP,KAAsBC,EAAtB,KACA,EAA0B5C,mBAAS,GAAnC,mBAAO6C,EAAP,KAAcC,EAAd,KACA,EAAkC9C,mBAAS,GAA3C,mBAAO+C,EAAP,KAAkBC,EAAlB,KACA,EAAgChD,oBAAS,GAAzC,mBAAOiD,EAAP,KAAiBC,EAAjB,KACA,EAAoClD,mBAAS,IAA7C,mBAAOmD,EAAP,KAAmBC,EAAnB,KAiBMC,EAAY,SAACvD,GACX6C,EAAcL,SAASxC,IACvBwD,QAAQC,IAAI,0BACZH,EAAc,cACdR,EAAiB,IACjBE,EAAS,KAETQ,QAAQC,IAAI,YACZX,EAAiB,GAAD,mBAAKD,GAAL,CAAoB7C,KAEpC0D,MAIFA,EAAgB,WAClB,IAAIC,EAAWZ,EAAQ,EACvBC,EAASW,GACLA,EAAWV,GACXC,EAAaS,GAEZR,GAAyB,IAAbQ,GACbL,EAAc,qCAEdH,GAAyB,KAAbQ,GACZL,EAAc,sCAwBhBM,EAAe,WACjB,IAAIC,EAnBQ,SAACC,GAIb,IAHA,IAAsBC,EAAGC,EAArBC,EAAIH,EAAM1B,OAGP6B,GAGLD,EAAI3B,KAAKC,MAAMD,KAAKE,SAAW0B,KAG/BF,EAAID,EAAMG,GACVH,EAAMG,GAAKH,EAAME,GACjBF,EAAME,GAAKD,EAGb,OAAOD,EAIaI,CAAQ,YAAIvB,IAChCC,EAAaiB,GACbL,QAAQC,IAAId,IAIVwB,EAAe,WAGb,IAFA,IAAIC,EAAWnC,KAEwC,IAAhDoC,EAAmBD,EAAUvB,IAA2BA,EAAcT,OAAS,IAClFoB,QAAQC,IAAI,oBACZW,EAAWnC,IAEfuB,QAAQC,IAAIW,GACZxB,EAAawB,IAIfC,EAAqB,SAACD,EAAUvB,GAClC,IAAIyB,EAAcF,EAASG,KAAI,SAAAC,GAAO,OAAIA,EAAQxE,MAClDwD,QAAQC,IAAIa,GACZ,IAAK,IAAIN,EAAI,EAAGA,EAAIM,EAAYlC,OAAQ4B,IACpC,IAA+C,IAA3CnB,EAAc4B,QAAQH,EAAYN,IAClC,OAAO,EAGf,OAAO,GAUX,OACI,gCACI,sBAAKtC,UAAU,YAAf,UACI,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,eACf,qBAAKA,UAAU,eACf,qBAAKA,UAAU,kBAEnB,qBAAKA,UAAU,YAAf,yBACA,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,eACf,qBAAKA,UAAU,eACf,qBAAKA,UAAU,qBAIvB,mEACA,oDACA,8BAAK,wBAAQA,UAAU,aAAaC,QA1BvB,WACrByB,GAAaD,GACbL,EAAiB,IACjBE,EAAS,GACTmB,KAsBa,SAA2DhB,EAAW,WAAa,iBACxF,sBAAKzB,UAAU,WAAf,UACI,2CAAcqB,KACd,gDAAmBE,WAI3B,sBAAKvB,UAAU,UAAf,UACI,sBAAKA,UAAU,eAAf,UACQ,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,cACf,qBAAKA,UAAU,cACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,cACf,qBAAKA,UAAU,iBAEnB,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,cACf,qBAAKA,UAAU,cACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,cACf,qBAAKA,UAAU,iBAEnB,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,cACf,qBAAKA,UAAU,cACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,cACf,qBAAKA,UAAU,oBAG3B,qBAAKA,UAAU,kBAAf,SACKiB,EAAU4B,KAAI,SAACG,GACZ,OACI,cAAC,EAAD,CAEI1E,GAAI0E,EAAS1E,GACbC,QAAS,kBA3JXD,EA2JkC0E,EAAS1E,GA1JjEwD,QAAQC,IAAI,oBAAsBzD,GAClCsD,EAAc,IACdC,EAAUvD,QAELmD,EAGDgB,IAFAP,KANiB,IAAC5D,IAyJO0E,EAAS1E,YASlC,qBAAK0B,UAAU,YAAf,SACI,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,eACf,qBAAKA,UAAU,eACf,qBAAKA,UAAU,kBAEnB,qBAAKA,UAAU,aAAf,SAA6B2B,IAC7B,sBAAK3B,UAAU,iBAAf,UACI,qBAAKA,UAAU,eACf,qBAAKA,UAAU,eACf,qBAAKA,UAAU,2BCvMxBiD,MATf,WACE,OACE,qBAAKjD,UAAU,MAAf,SAEI,cAAC,EAAD,OCGOkD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5D,MAAK,YAAkD,IAA/C6D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8573e69b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Gamecard = ({id, clicked}) => {\n\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [boss, setBoss] = useState({});\n    const [bossName, setBossName] = useState('');\n    const [hover, setHover] = useState(false);\n    \n\n\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        fetch(`https://megaman-robot-masters.herokuapp.com/byId/${id}`, {\n            method: 'GET'\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setBoss(result);\n                    setBossName(result.name.toUpperCase());\n                },\n\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n        \n            return () => {\n            abortController.abort();\n        }\n\n    }, );\n\n    const mouseEntered = () => {\n        setHover(true);\n        // console.log('hover on ' + boss.name)\n    }\n\n    const mouseLeft = () => {\n        setHover(false);\n        // console.log('hover off ' + boss.name)\n    }\n\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div className=\"loadingDiv\">Loading...</div>;\n    } else {\n        return (\n            \n                    <div className=\"gameCardDiv\" onClick={clicked} onMouseEnter={mouseEntered} onMouseLeave={mouseLeft}>\n                        <div className=\"bossFrameOuter\">\n                            <div className=\"bossFrameMiddle\">\n                                <div className=\"bossFrameInner\">\n                                    <span className={hover ? 'bossCornerHover secondCorner' : 'bossCorner secondCorner'}></span>\n                                    <span className={hover ? 'bossCornerHover firstCorner' : 'bossCorner firstCorner'}></span>\n                                    <span className={hover ? 'bossCornerHover thirdCorner' : 'bossCorner thirdCorner'}></span>\n                                    <span className={hover ? 'bossCornerHover fourthCorner' : 'bossCorner fourthCorner'}></span>\n                                    <div className=\"bossImgDiv\">\n                                        <img className=\"bossImg\" src={boss.avatar} alt={bossName}/>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"bossName\">{bossName}</div>\n                    </div>\n            \n        );\n    }\n\n\n\n\n    // return (\n    //     <div>\n            \n    //         <div className=\"gameCardDiv\" onClick={clicked}>\n    //             {letter}\n    //         </div>\n\n    //     </div>\n    // )\n\n}\n\n\nexport default Gamecard;","import React, { useState, useEffect } from 'react';\nimport Gamecard from './Gamecard';\n\n\nconst getCards = () => {\n    // Get randomized array of boss ids. Empty deps array means this will only run once when Gameboard mounts\n    let bossIdArray = [];\n    let bossCards = [];\n    let numCards = 9; // Adjust for number of cards\n        while (bossIdArray.length < numCards) {\n            let id = Math.floor(Math.random() * 32) + 9\n\n            // if (id < 10) {\n            //     id = '00' + id;\n            // } else {\n            //     id = '0' + id;\n            // }\n            \n            if (!bossIdArray.includes(id)) {\n                bossIdArray.push(id);\n                bossCards.push({id:id});\n            } \n        }\n    // console.log(bossIdArray);\n    // console.log(bossCards);\n    return bossCards;\n    \n}\n\n\nconst Gameboard = () => {\n\n    const [gameCards, setGameCards] = useState(getCards());\n    const [pickedCardIds, setPickedCardIds] = useState([]);\n    const [score, setScore] = useState(0);\n    const [highScore, setHighScore] = useState(0);\n    const [hardMode, setHardMode] = useState(false);\n    const [resultText, setResultText] = useState('');\n\n\n    const handleCardSelect = (id) => {\n        console.log('you clicked card ' + id);\n        setResultText('');\n        checkCard(id);\n\n        if (!hardMode) {\n            shuffleCards();\n        } else {\n            dealNewCards();\n        }\n\n\n    }\n\n    const checkCard = (id) => {\n        if (pickedCardIds.includes(id)) {\n            console.log(\"Already picked! Reset!\");\n            setResultText('Try again!')\n            setPickedCardIds([]);\n            setScore(0);\n        } else {\n            console.log(\"Correct!\");\n            setPickedCardIds([...pickedCardIds, id]);\n            //console.log(pickedCardIds);\n            increaseScore();\n        }\n    }\n\n    const increaseScore = () => {\n        let newScore = score + 1;\n        setScore(newScore)\n        if (newScore > highScore) {\n            setHighScore(newScore);\n        }\n        if (!hardMode && newScore === 9) {\n            setResultText('You win! Select any boss to reset');\n        }\n        if (hardMode && newScore === 32) {\n            setResultText('You win! Select any boss to reset');\n        }\n    }\n\n\n    // Shuffle array function (https://bost.ocks.org/mike/shuffle/)\n    const shuffle = (array) => {\n        let m = array.length, t, i;\n    \n      // While there remain elements to shuffle…\n        while (m) {\n    \n          // Pick a remaining element…\n          i = Math.floor(Math.random() * m--);\n    \n          // And swap it with the current element.\n          t = array[m];\n          array[m] = array[i];\n          array[i] = t;\n        }\n    \n        return array;\n      } \n\n    const shuffleCards = () => {\n        let shuffledCards = shuffle([...gameCards]);\n        setGameCards(shuffledCards);\n        console.log(gameCards);\n    }  \n\n\n    const dealNewCards = () => {\n            let newCards = getCards();    \n\n            while (checkCardsForMatch(newCards, pickedCardIds) === true && pickedCardIds.length < 32) {\n                console.log('no unique bosses');\n                newCards = getCards();\n            }\n            console.log(newCards);\n            setGameCards(newCards);\n        \n    }\n\n    const checkCardsForMatch = (newCards, pickedCardIds) => {\n        let newCardsIds = newCards.map(newCard => newCard.id);\n        console.log(newCardsIds);\n        for (let i = 0; i < newCardsIds.length; i++) {\n            if (pickedCardIds.indexOf(newCardsIds[i]) === -1) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    const toggleDifficulty = () => {\n        setHardMode(!hardMode);\n        setPickedCardIds([]);\n        setScore(0);\n        dealNewCards();\n    }\n    \n    return (\n        <div>\n            <div className=\"headerDiv\">\n                <div className=\"titleDiv\">\n                    <div className=\"titleLineGroup\">\n                        <div className=\"titleLines\"></div>\n                        <div className=\"titleLines\"></div>\n                        <div className=\"titleLines\"></div>\n                    </div>\n                    <div className=\"titleText\">MEMORY GAME</div>\n                    <div className=\"titleLineGroup\">\n                        <div className=\"titleLines\"></div>\n                        <div className=\"titleLines\"></div>\n                        <div className=\"titleLines\"></div>\n                    </div>\n                </div>\n                \n                <h3>Don't select the same boss twice!</h3>\n                <h3>Change difficulty:</h3>\n                <div><button className=\"gameButton\" onClick={toggleDifficulty}>{hardMode ? '- HARD -' : '- NORMAL -'}</button></div>\n                <div className=\"scoreDiv\">\n                    <span>Score: {score}</span>\n                    <span>High score: {highScore}</span>\n                </div>\n            </div>\n\n            <div className=\"bodyDiv\">\n                <div className=\"bodyLinesDiv\">\n                        <div className=\"bodyLinesGroup\">\n                            <div className=\"bodyLines\"></div>\n                            <div className=\"bodyLines\"></div>\n                            <div className=\"bigBodyLines\"></div>\n                            <div className=\"bodyLines\"></div>\n                            <div className=\"bodyLines\"></div>\n                        </div>\n                        <div className=\"bodyLinesGroup\">\n                            <div className=\"bodyLines\"></div>\n                            <div className=\"bodyLines\"></div>\n                            <div className=\"bigBodyLines\"></div>\n                            <div className=\"bodyLines\"></div>\n                            <div className=\"bodyLines\"></div>\n                        </div>\n                        <div className=\"bodyLinesGroup\">\n                            <div className=\"bodyLines\"></div>\n                            <div className=\"bodyLines\"></div>\n                            <div className=\"bigBodyLines\"></div>\n                            <div className=\"bodyLines\"></div>\n                            <div className=\"bodyLines\"></div>\n                        </div>\n                </div>\n                <div className=\"gameCardGridDiv\">\n                    {gameCards.map((gameCard) => {\n                        return (\n                            <Gamecard\n                                key={gameCard.id}\n                                id={gameCard.id}\n                                clicked={() => handleCardSelect(gameCard.id)}\n                            />\n                        );\n                    })}\n                </div>\n            </div>\n\n            <div className=\"footerDiv\">\n                <div className=\"titleDiv\">\n                    <div className=\"titleLineGroup\">\n                        <div className=\"titleLines\"></div>\n                        <div className=\"titleLines\"></div>\n                        <div className=\"titleLines\"></div>\n                    </div>\n                    <div className=\"footerText\">{resultText}</div>\n                    <div className=\"titleLineGroup\">\n                        <div className=\"titleLines\"></div>\n                        <div className=\"titleLines\"></div>\n                        <div className=\"titleLines\"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n\n}\n\n\nexport default Gameboard;","import './App.css';\nimport './Gameboard.css';\nimport './Gamecard.css';\nimport Gameboard from './components/Gameboard.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n        <Gameboard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}